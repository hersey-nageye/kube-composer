name: Docker Build, Scan and Push to ECR

on:
  push:
    branches: [ main ]
    paths: [ 'app/**', '.github/workflows/docker-*.yaml' ]
  pull_request:
    branches: [ main ]
    paths: [ 'app/**', '.github/workflows/docker-*.yaml' ]

env:
  AWS_REGION: eu-west-2
  ECR_REPOSITORY: ecs-project

permissions:
  contents: read
  security-events: write
  actions: read

concurrency:
  group: docker-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-scan-push:
    name: Build, Scan and Push Docker Image to ECR
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.tags.outputs.sha_tag }}
      image_uri: ${{ steps.tags.outputs.image_uri }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Compute unique tag
        id: tags
        run: |
          echo "short=${GITHUB_SHA::12}" >> $GITHUB_OUTPUT
          echo "sha_tag=sha-${GITHUB_SHA::12}" >> $GITHUB_OUTPUT
          echo "image_uri=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:sha-${GITHUB_SHA::12}" >> $GITHUB_OUTPUT

      # -------- Build (with cache) --------
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build image (linux/amd64, load to local daemon)
        run: |
          docker buildx build \
            --platform linux/amd64 \
            --label org.opencontainers.image.revision=${GITHUB_SHA} \
            --label org.opencontainers.image.source=${{ github.repository }} \
            --cache-from type=local,src=/tmp/.buildx-cache \
            --cache-to type=local,dest=/tmp/.buildx-cache-new,mode=max \
            -f app/Dockerfile \
            -t ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ steps.tags.outputs.sha_tag }} \
            --load \
            app/
          # rotate cache
          rm -rf /tmp/.buildx-cache && mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      # -------- Scans --------
      - name: Run Trivy vulnerability scan (SARIF)
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: '${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ steps.tags.outputs.sha_tag }}'
          format: sarif
          output: trivy-results.sarif
        timeout-minutes: 10

      - name: Upload Trivy SARIF to GitHub Security
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-results.sarif

      - name: Trivy gate (fail on HIGH/CRITICAL)
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: '${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ steps.tags.outputs.sha_tag }}'
          scanners: vuln
          ignore-unfixed: true
          severity: CRITICAL,HIGH
          format: table
          output: trivy-gate.txt
          exit-code: '1'
        timeout-minutes: 10

      - name: Upload Trivy gate output
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: trivy-gate-output
          path: trivy-gate.txt

      # -------- Push (main only) --------
      - name: Push to ECR
        if: github.ref == 'refs/heads/main'
        run: |
          docker push ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ steps.tags.outputs.sha_tag }}

      # -------- Expose outputs --------
      - name: Expose outputs
        id: out
        run: |
          echo "image_tag=${{ steps.tags.outputs.sha_tag }}" >> $GITHUB_OUTPUT
          echo "image_uri=${{ steps.tags.outputs.image_uri }}" >> $GITHUB_OUTPUT
