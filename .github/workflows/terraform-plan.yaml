name: Terraform Security Scan and Plan

permissions:
  contents: read
  security-events: write
  pull-requests: write
  issues: write

on:
  push:
    branches: [ main ]
    paths:
      - 'terraform/**'
      - '.github/workflows/terraform-plan.yaml'
  pull_request:
    branches: [ main ]
    paths:
      - 'terraform/**'
      - '.github/workflows/terraform-plan.yaml'

jobs:
  terraform-scan-and-plan:
    name: Security Scan and Terraform Plan
    runs-on: ubuntu-latest
    concurrency:
      group: tf-plan-${{ github.ref }}
      cancel-in-progress: true
    env:
      AWS_REGION: eu-west-2
      AWS_DEFAULT_REGION: eu-west-2
      TF_VERSION: 1.11.2
    defaults:
      run:
        working-directory: terraform

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Clear stale S3 lockfile (if any)
        run: |
           aws s3api head-object \
              --bucket "${{ secrets.TF_STATE_BUCKET }}" \
              --key "${{ secrets.TF_STATE_KEY }}.tflock" \
              --region "${{ env.AWS_REGION }}" >/dev/null 2>&1 && \
           aws s3 rm "s3://${{ secrets.TF_STATE_BUCKET }}/${{ secrets.TF_STATE_KEY }}.tflock" \
              --region "${{ env.AWS_REGION }}" || true


      # ---------- Security scans ----------
      - name: Setup Python for Checkov
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Checkov
        run: pip install checkov

      - name: Run Checkov security scan
        run: |
          checkov -d . --framework terraform \
            --output cli \
            --output junitxml \
            --output sarif \
            --output-file-path console,checkov-report.xml,checkov.sarif
        continue-on-error: true

      - name: Upload Checkov SARIF to code scanning
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: terraform/checkov.sarif

      - name: Setup TFLint
        uses: terraform-linters/setup-tflint@v4
        with:
          tflint_version: v0.48.0

      - name: Init TFLint
        run: tflint --init

      - name: Run TFLint
        run: tflint -f compact

      - name: Terraform Format Check
        run: terraform fmt -check -recursive

      # ---------- Backend & plan ----------
    #   - name: Debug AWS env
    #     run: |
    #       echo "Region vars:"
    #       echo "AWS_REGION=${AWS_REGION}"
    #       echo "AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION}"
    #       echo "Endpoint vars (should be empty):"
    #       env | grep -E '^AWS_.*ENDPOINT' || true

    #   - name: Clear custom AWS endpoint envs (avoid blank endpoint errors)
    #     run: |
    #       unset AWS_ENDPOINT_URL || true
    #       unset AWS_ENDPOINT_URL_DYNAMODB || true
    #       unset AWS_DYNAMODB_ENDPOINT || true

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
            -backend-config="key=${{ secrets.TF_STATE_KEY }}" \
            -backend-config="region=${{ env.AWS_REGION }}"

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        id: plan
        run: |
          terraform plan -input=false -lock-timeout=5m -no-color -out=tfplan
          terraform show -no-color tfplan > tfplan.txt

      # ---------- Surface results ----------
      - name: Upload Terraform Plan
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan
          path: |
            terraform/tfplan
            terraform/tfplan.txt

      - name: Comment PR with Terraform Plan
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const plan = fs.readFileSync('terraform/tfplan.txt', 'utf8');
            const maxCommentLength = 65536;
            let output = `#### Terraform Plan \n\`\`\`hcl\n${plan}\n\`\`\``;
            if (output.length > maxCommentLength) {
              output = `#### Terraform Plan\n\nPlan is too long to display in a comment. Please check the uploaded artifact.\n`;
            }
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });

      - name: Security Scan & Plan Summary
        if: always()
        run: |
          {
            echo "## Summary";
            echo "### Checkov";
            echo "- Security scan completed (see code scanning & artifacts)";
            echo "### TFLint";
            echo "- Linting completed";
            echo "### Terraform Plan";
            echo "- Plan generated and uploaded as artifact";
          } >> $GITHUB_STEP_SUMMARY
